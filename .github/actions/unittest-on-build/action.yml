---
name: "run-unittests-on-build"
description: "Runs unit tests on Docker image build"

inputs:
  image_tag:
    required: true
    type: string
    description: "Tag of the image"
  timeout_seconds:
    required: true
    type: integer
    description: "Timeout for the server to startup"
    default: "300"

runs:
  using: "composite"
  steps:
    - name: Get Runner Info
      shell: bash
      run: |
        id
        pwd
        git --version
        docker version
        echo "TIMEOUT_SECONDS: ${{ inputs.timeout_seconds }}"

    - name: Run server
      shell: bash
      run: |
        docker run -d \
        --name palworld-dedicated-server \
        -p 8211:8211/udp \
        -p 8212:8212/tcp \
        -p 25575:25575/tcp \
        -e ADMIN_PASSWORD=123 \
        -e SERVER_PASSWORD=456 \
        -e SERVER_SETTINGS_MODE=auto \
        -v ./game:/palworld/ \
        --restart unless-stopped \
        --stop-timeout 30 \
        jammsen/palworld-dedicated-server:${{ inputs.image_tag }}

    - name: Wait for server to start
      shell: bash
      run: |
        START_TIME=$(date +%s)
        echo "TIMEOUT_SECONDS: ${{ inputs.timeout_seconds }}"

        # Set the timezone to Germany (Central European Time)
        export TZ=Europe/Berlin

        while ! docker logs palworld-dedicated-server 2>&1 | grep -q "Setting breakpad minidump AppID"; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

          if [ $ELAPSED_TIME -gt ${{ inputs.timeout_seconds }} ]; then
            echo "Timeout reached. Server failed to start within ${{ inputs.timeout_seconds }} seconds."
            printf "\e[0;32m%s\e[0m\n" "*****Container LOGS*****"
            docker logs palworld-dedicated-server
            exit 1
          fi

          echo "$(date '+%H:%M:%S') - Waiting for server to start..."
          sleep 5
        done
        echo "Server successfully started"
        printf "\e[0;32m%s\e[0m\n" "*****Container LOGS*****"
        docker logs palworld-dedicated-server


    - name: Test if port 8766, 27015 and 27016 are listening
      shell: bash
      run: |
        nc -z -u -v 127.0.0.1 8211 || exit 2
        nc -z -v 127.0.0.1 8212 || exit 3
        nc -z -v 127.0.0.1 25575 || exit 4

    - name: Stop server
      shell: bash
      if: always()
      run: |
        docker stop palworld-dedicated-server
        docker rm palworld-dedicated-server
